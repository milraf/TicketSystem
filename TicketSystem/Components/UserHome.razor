@using SQLDataAccess.Models
@using TicketSystem.Managers
@inject NavigationManager nav
@inject TicketManager ticketManager
@inject UserManager userManager

<ModalComponent @ref="warningModal" Title="Delete ticket" SubmitButtonTitle="Delete ticket" Callback="DeleteTicket">
    <p>Delete this ticket? You can not undo this action.</p>
</ModalComponent>

<button class="btn btn-primary" @onclick="NavigateToCreateTicket">Create Ticket</button>

<table class="table table-striped">
    <thead>
        <tr>
            <td></td>
            <td>Id</td>
            <td>Date</td>
            <td>Title</td>
            <td>Status</td>
        </tr>
    </thead>
    <tbody>
        @foreach(TicketModel ticket in userTickets)
        {
            <tr>
                <td>
                    <button class="btn btn-outline-info" @onclick="() => EditTicket(ticket.Id)">Edit</button>
                    <button class="btn btn-outline-danger" @onclick="() => OpenDeleteTicket(ticket.Id)">Delete</button>
                </td>
                <td>@ticket.Id</td>
                <td>@ticket.DateTime</td>
                <td>@ticket.Title</td>
                <td>@Enum.GetName(typeof(TicketStatus), ticket.Status)</td>
            </tr>
        }
    </tbody>
</table>


@code {
    private ModalComponent warningModal;
    private int idTicketToDelete;

    private List<TicketModel> userTickets = new List<TicketModel>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var tickets = await ticketManager.LoadTickets();
        userTickets = tickets.Where(x => x.RequestorId == userManager.CurrentUser.Id).ToList();
    }

    private void NavigateToCreateTicket()
    {
        nav.NavigateTo("/create-ticket");
    }

    private void EditTicket(int id)
    {
        nav.NavigateTo($"/edit-ticket/{id}");
    }

    private void OpenDeleteTicket(int id)
    {
        warningModal.Show();
        idTicketToDelete = id;
        //Delete ticket
    }

    private async Task DeleteTicket()
    {
        await ticketManager.DeleteTicketById(idTicketToDelete);
        var ticketToRemove = userTickets.FirstOrDefault(x => x.Id == idTicketToDelete);
        userTickets.Remove(ticketToRemove);
        await InvokeAsync(StateHasChanged);
    }
}
